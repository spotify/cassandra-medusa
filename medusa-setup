#!/bin/bash
set -e

if [ "$#" -lt 4 ]; then
  echo "Usage: $0 GCP_PROJECT ROLE POD LOCATION [SERVICE_ACCOUNT_NAME]" >&2
  echo "Example: $0 identity2-medusa identity2 gew1 europe-west1" >&2
  echo "Example to enforce service account name: " >&2
  echo "$0 identity2-medusa identity2 gew1 europe-west1 identity2cassandra-medusa" >&2
  exit 1
fi

set -x

export GCP_PROJECT=$1
export ROLE=$2
export POD=$3
export LOCATION=$4
export SERVICE_ACCOUNT_NAME=$5
if [ -z "${SERVICE_ACCOUNT_NAME}" ]
then
      SERVICE_ACCOUNT_NAME="${ROLE}-medusa"
fi

# truncate the service account name to 30 characters as Google disallows more...
SERVICE_ACCOUNT_NAME=${SERVICE_ACCOUNT_NAME:0:30}
export BUCKET_NAME="${ROLE}-backup"
export BUCKET_URL="gs://${BUCKET_NAME}"

# TTL for backups of this bucket
MAX_AGE=30

# Check if active project of gcloud matches the user-specified parameter
ACTIVE_PROJECT=$(gcloud config list 2>&1 | grep project | cut -d= -f2 | tr -d ' ')
if [ ${ACTIVE_PROJECT} != ${GCP_PROJECT} ]; then
    echo "ERROR: Chosen project ${GCP_PROJECT} is not the same as currently active gcloud project ${ACTIVE_PROJECT}"
    echo "Please run 'gcloud config set project ${GCP_PROJECT}' to make them match"
    exit 1
fi

# Check if the role exists and possibly create it
ROLE_EXISTS=$(gcloud iam roles list --project ${GCP_PROJECT} | grep title | grep -c MedusaStorageAgent || true)
if [ ${ROLE_EXISTS} -eq 1 ]; then
    echo "Role MedusaStorageAgent already exists in project ${GCP_PROJECT}, not creating again"
else
    echo "Role MedusaStorageAgent does not exist in project ${GCP_PROJECT}, creating ..."
    gcloud iam roles create MedusaStorageAgent \
        --project ${GCP_PROJECT} \
        --stage GA \
        --title MedusaStorageAgent \
        --description "Custom role for Medusa for accessing GCS safely" \
        --permissions storage.buckets.get,storage.buckets.getIamPolicy,storage.objects.create,storage.objects.delete,storage.objects.get,storage.objects.getIamPolicy,storage.objects.list
fi

#Create bucket
echo "Creating GCP bucket ${BUCKET_NAME}"
# --retention 30d prevents unwanted deletes for 30 days
gsutil mb -p ${GCP_PROJECT} -c regional -l ${LOCATION} ${BUCKET_URL}

# Add TTL to the bucket
cat <<EOF >life.json
{
  "rule":
  [
    {
      "action": {"type": "Delete"},
      "condition": {"age": ${MAX_AGE}}
    }
  ]
}
EOF

gsutil lifecycle set life.json ${BUCKET_URL} && rm life.json
echo

#Service account
echo "Setting up service account"
gcloud --project ${GCP_PROJECT} iam service-accounts create ${SERVICE_ACCOUNT_NAME} --display-name ${SERVICE_ACCOUNT_NAME}
gcloud --project ${GCP_PROJECT} iam service-accounts keys create ${SERVICE_ACCOUNT_NAME}.json --iam-account=${SERVICE_ACCOUNT_NAME}@${GCP_PROJECT}.iam.gserviceaccount.com
echo

#Add credentials to celo
echo "Pushing service account's secret to CELO. Will ask for password"
(curl --fail -u ${USER} -X POST https://celo.spotify.net/role/${ROLE}/production -d key='medusa::credentials' --data-urlencode secret@${SERVICE_ACCOUNT_NAME}.json && rm ${SERVICE_ACCOUNT_NAME}.json) || exit $?
echo

#Grant permissions
echo "Granting bucket permissions to the service account"
gsutil iam set <(gsutil iam get ${BUCKET_URL} | jq ".bindings += [{\"members\":[\"serviceAccount:${SERVICE_ACCOUNT_NAME}@${GCP_PROJECT}.iam.gserviceaccount.com\"],\"role\":\"projects/${GCP_PROJECT}/roles/MedusaStorageAgent\"}]") ${BUCKET_URL}
echo

#Configure the source cluster
echo "Calling hecuba-cli to configure the C* cluster"
ssh -At ${USER}@basesusers.services.gew1.spotify.net "hecuba2-cli enable-medusa --role ${ROLE} --pod ${POD} --bucket ${BUCKET_NAME} --frequency daily"
echo

echo "Setup done. Please review & merge the PR above (see https://ghe.spotify.net/puppet/spotify-puppet/pulls, look for the PR from yourself - 'Hecuba2 PR')."
echo "Please make sure the right bucket (ie ${BUCKET_NAME}) is in use for ${ROLE} in hiera-data/role/${ROLE}/${POD}.yaml"
echo
