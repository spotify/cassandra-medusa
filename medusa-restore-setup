#!/bin/bash

set -e

display_usage() {
  echo
  echo "Sets up restores with Medusa. Only needed when restoring to a different Hardware" >&2
  echo "Usage: $0 -p/--project GCP_PROJECT -b/--bucket GCP_BUCKET --restore-role RESTORE_ROLE --source-role SOURCE_ROLE --source-dc SOURCE_DC --hosts HOSTS [-f/--restore-test-frequency RESTORE_TEST_CLUSTER_FREQUENCY] [-a/--service-acount SERVICE_ACCOUNT_NAME] [--local-hecuba]" >&2
  echo
  echo "With:"
  echo "- GCP_PROJECT --> project owning the bucket with backups"
  echo "- GCP_BUCKET --> bucket owning backups"
  echo "- RESTORE_ROLE --> Role for the restore cluster nodes"
  echo "- SOURCE_ROLE --> Role to copy the hecuba topology from"
  echo "- SOURCE_DC --> Cassandra DC we want to copy information from (gew, gae, guc, ...)"
  echo "- RESTORE_TEST_CLUSTER_FREQUENCY --> {disabled, daily, weekly}"
  echo "- SERVICE_ACCOUNT_NAME --> The name of the service account to create/use"
  echo "- LOCAL_HECUBA --> Flag, no value to pass. if the option/flag is given, runs the hecuba command locally to create the restore cluster"
  echo "Example: $0 identity2-medusa identity2-backup identity2restorecassandra gew1 identity2cassandra gew disabled" >&2
  echo
  echo
  echo "Example to enforce service account name: " >&2
  echo "$0 -p identity2-medusa -b identity2-backup --restore-role identity2restorecassandra --source-role identity2cassandra --source-dc gew -a identity2cassandra-medusa --hosts gew1-identity2restorecassandra-x-abcd.gew1.spotify.net gew1-identity2restorecassandra-x-efgh.gew1.spotify.net gew1-identity2restorecassandra-x-ijkl.gew1.spotify.net" >&2
  echo "Example to set up automated weekly restore tests: " >&2
  echo "$0 -p identity2-medusa -b identity2-backup --restore-role identity2restorecassandra --source-role identity2cassandra --source-dc gew -f weekly --hosts gew1-identity2restorecassandra-x-abcd.gew1.spotify.net gew1-identity2restorecassandra-x-efgh.gew1.spotify.net gew1-identity2restorecassandra-x-ijkl.gew1.spotify.net" >&2
  echo
  exit 1
}

while [[ $# -gt 0 ]]
do
  key="$1"
  case $key in
    -p|--project)
      GCP_PROJECT="$2"
      shift # past argument
      shift # past value
      ;;
    -b|--bucket)
      BUCKET_NAME="$2"
      shift # past argument
      shift # past value
      ;;
    --restore-role)
      RESTORE_ROLE="$2"
      shift # past argument
      shift # past value
      ;;
    --source-role)
      SOURCE_ROLE="$2"
      shift # past argument
      shift # past value
      ;;
    --source-dc)
      SOURCE_DC="$2"
      shift # past argument
      shift # past value
      ;;
    -f|--restore-test-frequency)
      RESTORE_TEST_CLUSTER_FREQUENCY="$2"
      shift # past argument
      shift # past value
      ;;
    -a|--service-acount)
      SERVICE_ACCOUNT_NAME="$2"
      shift # past argument
      shift # past value
      ;;
    --hosts)
      HOSTS=()
      shift # past argument
      re='^-[a-zA-Z]$|^--\w$'
      while [[ ! "$1" =~ $re ]] && [ -n "$1" ]
      do
        HOSTS+=("$1")
        shift # past host
      done
      echo ${HOSTS[@]}
      ;;
    -l|--local-hecuba)
        LOCAL_HECUBA=true
        shift # past argument
        ;;
    *)    # unknown option
      display_usage
      ;;
  esac
done

mandatory_options=('GCP_PROJECT' 'BUCKET_NAME' 'RESTORE_ROLE' 'SOURCE_ROLE' 'SOURCE_DC')
for opt in ${mandatory_options[@]}
do
  # Get the value behind the name variable (ie ${!opt} --> evaluate $GCP_PROJECT, then $BUCKET_NAME, etc
  if [ -z "${!opt}" ]
  then
        echo
        echo "$opt is not defined, plese set it using the corresponding option"
        echo
        display_usage
  else
    echo "${opt} --> ${!opt}"
  fi
done

if [ -z "${RESTORE_TEST_CLUSTER_FREQUENCY}" ]
then
      RESTORE_TEST_CLUSTER_FREQUENCY="disabled"
fi
if [ -z "${SERVICE_ACCOUNT_NAME}" ]
then
      SERVICE_ACCOUNT_NAME="${RESTORE_ROLE}-medusa"
fi

# truncate the service account name to 30 characters as Google disallows more...
SERVICE_ACCOUNT_NAME=${SERVICE_ACCOUNT_NAME:0:30}
export BUCKET_URL="gs://${BUCKET_NAME}"

# Check if active project of gcloud matches the user-specified parameter
ACTIVE_PROJECT=$(gcloud config list 2>&1 | grep project | cut -d= -f2 | tr -d ' ')
if [ ${ACTIVE_PROJECT} != ${GCP_PROJECT} ]; then
    echo "ERROR: Chosen project ${GCP_PROJECT} is not the same as currently active gcloud project ${ACTIVE_PROJECT}"
    echo "Please run 'gcloud config set project <PROJECT>' to make them match"
    exit 1
fi

GCP_ROLE="MedusaRestoreAgent"

# Check if the role exists and possibly create it
description="Granted to service accounts performing only restores with medusa."
permissions="storage.buckets.get,storage.buckets.getIamPolicy,storage.objects.get,storage.objects.getIamPolicy,storage.objects.list,iam.serviceAccounts.delete"
ROLE_EXISTS=$(gcloud iam roles list --project ${GCP_PROJECT} | grep title | grep -c ${GCP_ROLE} || true)
if [ ${ROLE_EXISTS} -eq 1 ]; then
    echo "Role ${GCP_ROLE} already exists in project ${GCP_PROJECT}, updating it"
    gcloud iam roles update ${GCP_ROLE} \
        --project ${GCP_PROJECT} \
        --description "${description}" \
        --permissions ${permissions}
else
    echo "Role ${GCP_ROLE} does not exist in project ${GCP_PROJECT}, creating ..."
    gcloud iam roles create ${GCP_ROLE} \
        --project ${GCP_PROJECT} \
        --stage GA \
        --title ${GCP_ROLE} \
        --description "${description}" \
        --permissions ${permissions}
fi

# (Re)creates service account.
echo "Setting up service account for restores"
SERVICE_EXISTS=$(gcloud iam service-accounts list --project ${GCP_PROJECT} | grep -c ${SERVICE_ACCOUNT_NAME} || true)
if [ ${SERVICE_EXISTS} -eq 1 ]
then
    echo "Service account ${SERVICE_ACCOUNT_NAME} already exists in project ${GCP_PROJECT}, delete it"
    gcloud --quiet --project ${GCP_PROJECT} iam service-accounts delete ${SERVICE_ACCOUNT_NAME}@${GCP_PROJECT}.iam.gserviceaccount.com
fi
echo "No service account ${SERVICE_ACCOUNT_NAME} found in project ${GCP_PROJECT}, (re)create it"
gcloud --project ${GCP_PROJECT} iam service-accounts create ${SERVICE_ACCOUNT_NAME} --display-name ${SERVICE_ACCOUNT_NAME}
gcloud --project ${GCP_PROJECT} iam service-accounts keys create ${SERVICE_ACCOUNT_NAME}.json --iam-account=${SERVICE_ACCOUNT_NAME}@${GCP_PROJECT}.iam.gserviceaccount.com
echo

# Add credentials to celo
echo "Pushing restore service account's secret to CELO. Will ask for password"
(curl --fail -u ${USER} -X POST https://celo.spotify.net/role/${RESTORE_ROLE}/production -d key='medusa::credentials' --data-urlencode secret@${SERVICE_ACCOUNT_NAME}.json && rm ${SERVICE_ACCOUNT_NAME}.json) || exit $?
echo

# Grant permissions
# Check existing setup
existing_binds=$(gsutil iam get ${BUCKET_URL} | jq ".bindings[] | select(.role == \"projects/${GCP_PROJECT}/roles/${GCP_ROLE}\")")
if [ -z "${existing_binds}" ]
then
    # Attach and allow ${GCP_ROLE} role to do stuff in the bucket (as desvribed above).
    echo "Granting bucket permissions to the restore service account"
    gsutil iam set <(gsutil iam get ${BUCKET_URL} | jq ".bindings += [{\"members\":[\"serviceAccount:${SERVICE_ACCOUNT_NAME}@${GCP_PROJECT}.iam.gserviceaccount.com\"],\"role\":\"projects/${GCP_PROJECT}/roles/${GCP_ROLE}\"}]") ${BUCKET_URL}
    echo
elif [[ ! $existing =~ ("serviceAccount:${SERVICE_ACCOUNT_NAME}@${GCP_PROJECT}.iam.gserviceaccount.com") ]]
then
    # create bind role/service-account, it does not exist only (check done within jq)
    gsutil iam set <(gsutil iam get ${BUCKET_URL} | jq "(.bindings[] | select(.\"role\" == \"projects/${GCP_PROJECT}/roles/${GCP_ROLE}\") | .members) |= (.+ [\"serviceAccount:${SERVICE_ACCOUNT_NAME}@${GCP_PROJECT}.iam.gserviceaccount.com\"] | unique)") ${BUCKET_URL}
fi

# Configure the source cluster
echo "Calling hecuba-cli to configure the C* restore cluster"
# For testing use your branch with something like: --local-puppet='/Users/tlp/TLP/client/spotify/code/spotify-puppet' --branch='CASS-89-medusa-test-module'
# Remove this comment once CASS-89 has been released.
hecuba_cmd="hecuba2-cli create-restore-cluster --bucket ${BUCKET_NAME} --source-role ${SOURCE_ROLE} --source-dc ${SOURCE_DC} --restore-test-frequency ${RESTORE_TEST_CLUSTER_FREQUENCY} -- ${HOSTS[@]}"
if [ -n "$LOCAL_HECUBA" ] && [ "$LOCAL_HECUBA" = true ]
then
    echo "Running hecuba locally with: ${hecuba_cmd}"
    eval $hecuba_cmd
else
    echo "Running hecuba from basesusers with: ${hecuba_cmd}"
    ssh -At ${USER}@basesusers.services.gew1.spotify.net "$hecuba_cmd"
fi
echo

echo "Restore setup done. Please review & merge the PR above"
echo
