#!/bin/bash
set -e

if [ "$#" -lt 4 ]; then
  echo "Sets up restores with Medusa. Only needed when restoring to a different HW." >&2
  echo "Usage: $0 GCP_PROJECT GCP_BUCKET ROLE POD" >&2
  echo "Example: $0 identity2-medusa identity2-backup identity2restoretest gew1" >&2
  echo "Example to enforce service account name: " >&2
  echo "$0 identity2-medusa identity2-backup gew1 europe-west1 identity2cassandra-medusa" >&2
  exit 1
fi

set -x

export GCP_PROJECT=$1
export BUCKET_NAME=$2
export ROLE=$3
export POD=$4
export SERVICE_ACCOUNT_NAME=$5
if [ -z "${SERVICE_ACCOUNT_NAME}" ]
then
      SERVICE_ACCOUNT_NAME="${ROLE}-medusa"
fi

# truncate the service account name to 30 characters as Google disallows more...
SERVICE_ACCOUNT_NAME=${SERVICE_ACCOUNT_NAME:0:30}
export BUCKET_URL="gs://${BUCKET_NAME}"

# Check if active project of gcloud matches the user-specified parameter
ACTIVE_PROJECT=$(gcloud config list 2>&1 | grep project | cut -d= -f2 | tr -d ' ')
if [ ${ACTIVE_PROJECT} != ${GCP_PROJECT} ]; then
    echo "ERROR: Chosen project ${GCP_PROJECT} is not the same as currently active gcloud project ${ACTIVE_PROJECT}"
    echo "Please run 'gcloud config set project <PROJECT>' to make them match"
    exit 1
fi

# Check if the role exists and possibly create it
ROLE_EXISTS=$(gcloud iam roles list --project ${GCP_PROJECT} | grep title | grep -c MedusaRestoreAgent || true)
if [ ${ROLE_EXISTS} -eq 1 ]; then
    echo "Role MedusaRestoreAgent already exists in project ${GCP_PROJECT}, not creating again"
else
    echo "Role MedusaRestoreAgent does not exist in project ${GCP_PROJECT}, creating ..."
    gcloud iam roles create MedusaRestoreAgent \
        --project ${GCP_PROJECT} \
        --stage GA \
        --title MedusaRestoreAgent \
        --description "Granted to service accounts performing only restores with medusa." \
        --permissions storage.buckets.get,storage.buckets.getIamPolicy,storage.objects.get,storage.objects.getIamPolicy,storage.objects.list
fi

# Service account
echo "Setting up service account for restores"
gcloud --project ${GCP_PROJECT} iam service-accounts create ${SERVICE_ACCOUNT_NAME} --display-name ${SERVICE_ACCOUNT_NAME}
gcloud --project ${GCP_PROJECT} iam service-accounts keys create ${SERVICE_ACCOUNT_NAME}.json --iam-account=${SERVICE_ACCOUNT_NAME}@${GCP_PROJECT}.iam.gserviceaccount.com
echo

# Add credentials to celo
echo "Pushing restore service account's secret to CELO. Will ask for password"
(curl --fail -u ${USER} -X POST https://celo.spotify.net/role/${ROLE}/production -d key='medusa::credentials' --data-urlencode secret@${SERVICE_ACCOUNT_NAME}.json && rm ${SERVICE_ACCOUNT_NAME}.json) || exit $?
echo

# Grant permissions
#TODO: create MedusaRestoreAgent role in gcp
echo "Granting bucket permissions to the restore service account"
gsutil iam set <(gsutil iam get ${BUCKET_URL} | jq ".bindings += [{\"members\":[\"serviceAccount:${SERVICE_ACCOUNT_NAME}@${GCP_PROJECT}.iam.gserviceaccount.com\"],\"role\":\"projects/${GCP_PROJECT}/roles/MedusaRestoreAgent\"}]") ${BUCKET_URL}
echo

# Configure the source cluster
echo "Calling hecuba-cli to configure the C* restore cluster"
ssh -At ${USER}@basesusers.services.gew1.spotify.net "hecuba2-cli enable-medusa --role ${ROLE} --pod ${POD} --bucket ${BUCKET_NAME} --frequency disabled"
echo

echo "Restore setup done. Please review & merge the PR above"
echo
