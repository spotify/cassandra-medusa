#!/bin/bash
set -e

if [ "$#" -ne 4 ]; then
  echo "Sets up restores with Medusa. Only needed when restoring to a different HW." >&2
  echo "Usage: $0 GCP_PROJECT GCP_BUCKET ROLE POD" >&2
  echo "Example: $0 medusa-backups identity-medusa-backup identity2restoretest gew1" >&2
  exit 1
fi

set -x

export GCP_PROJECT=$1
export BUCKET_NAME=$2
export ROLE=$3
export POD=$4

export SERVICE_ACCOUNT_NAME="${ROLE}-medusa"
export BUCKET_URL="gs://${BUCKET_NAME}"

# Service account
echo "Setting up service account for restores"
gcloud --project ${GCP_PROJECT} iam service-accounts create ${SERVICE_ACCOUNT_NAME} --display-name ${SERVICE_ACCOUNT_NAME}
gcloud --project ${GCP_PROJECT} iam service-accounts keys create ${SERVICE_ACCOUNT_NAME}.json --iam-account=${SERVICE_ACCOUNT_NAME}@${GCP_PROJECT}.iam.gserviceaccount.com
echo

# Add credentials to celo
echo "Pushing restore service account's secret to CELO. Will ask for password"
curl --fail -u ${USER} -X POST https://celo.spotify.net/role/${ROLE}/production -d key='medusa::credentials' --data-urlencode secret@${SERVICE_ACCOUNT_NAME}.json && rm ${SERVICE_ACCOUNT_NAME}.json
echo

# Grant permissions
#TODO: create MedusaRestoreAgent role in gcp
echo "Granting bucket permissions to the restore service account"
gsutil iam set <(gsutil iam get ${BUCKET_URL} | jq ".bindings += [{\"members\":[\"serviceAccount:${SERVICE_ACCOUNT_NAME}@${GCP_PROJECT}.iam.gserviceaccount.com\"],\"role\":\"projects/medusa-backups/roles/MedusaRestoreAgent\"}]") ${BUCKET_URL}
echo

# Configure the source cluster
echo "Calling hecuba-cli to configure the C* restore cluster"
hecuba2-cli enable-medusa --role ${ROLE} --pod ${POD} --bucket ${BUCKET_NAME} --frequency disabled
echo

echo "Restore setup done. Please review & merge the PR above"
echo

